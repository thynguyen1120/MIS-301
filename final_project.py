# -*- coding: utf-8 -*-
"""Final Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sKCp4LlrAQLiEzmy0GLXnUqPMPK4wzFf
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

stores = pd.read_csv('Stores.csv')
sales = pd.read_csv('Sales.csv')
products = pd.read_csv('Products.csv')
exchangerates = pd.read_csv('Exchange_Rates.csv')
datadict = pd.read_csv('Data_Dictionary.csv')
customers = pd.read_csv('Customers.csv', encoding='latin-1')

stores.head()

sales.head()

products.head()

exchangerates.head()

datadict.head()

customers.head()

stores.describe()

stores.info()

stores.dtypes

sales_cleaned = sales.drop(columns=['Delivery Date'])
datadict_cleaned = datadict.drop(columns=['Delivery Date'], errors='ignore')

sales_cleaned.head()

# Assuming the 'customers' dataset is already loaded

# Step 1: Create a dictionary mapping State to State Code
state_code_mapping = customers.dropna(subset=['State Code'])[['State', 'State Code']].drop_duplicates()
state_code_dict = dict(zip(state_code_mapping['State'], state_code_mapping['State Code']))

# Step 2: Fill missing 'State Code' values based on 'State' column
customers['State Code'] = customers.apply(
    lambda row: state_code_dict.get(row['State'], f"NewCode_{row.name}") if pd.isnull(row['State Code']) else row['State Code'],
    axis=1
)

# Remove rows with missing data in the 'Square Meters' column in the Store dataset
stores_cleaned = stores.dropna(subset=['Square Meters'])

stores_cleaned.head()

# Task 1
import pandas as pd

# Load the necessary datasets
customers = pd.read_csv('/content/Customers.csv', encoding='ISO-8859-1')
datadict = pd.read_csv('/content/Data_Dictionary.csv', encoding='ISO-8859-1')
exchangerates = pd.read_csv('/content/Exchange_Rates.csv', encoding='ISO-8859-1')
products = pd.read_csv('/content/Products.csv', encoding='ISO-8859-1')
sales = pd.read_csv('/content/Sales.csv', encoding='ISO-8859-1')
stores = pd.read_csv('/content/Stores.csv', encoding='ISO-8859-1')

#EDA
# Display basic statistics for the dataset
customers.describe()

# Check for missing data
customers.isnull().sum()

# Visualize the distribution of a numerical column (example: Zip Code)
import matplotlib.pyplot as plt
import pandas as pd

# Convert 'Zip Code' to numeric, coercing errors
customers['Zip Code'] = pd.to_numeric(customers['Zip Code'], errors='coerce')

# Drop rows where 'Zip Code' is NaN after coercion, if necessary
customers.dropna(subset=['Zip Code'], inplace=True)


customers['Zip Code'].plot(kind='hist', bins=20, figsize=(10, 6))
plt.title('Distribution of Zip Codes')
plt.xlabel('Zip Code')
plt.show()

# Drop the "Delivery Date" column
sales_cleaned = sales.drop(columns=['Delivery Date'])
datadict_cleaned = datadict.drop(columns=['Delivery Date'], errors='ignore')

# Create a dictionary for mapping 'State' to 'State Code'
state_code_mapping = customers.dropna(subset=['State Code'])[['State', 'State Code']].drop_duplicates()
state_code_dict = dict(zip(state_code_mapping['State'], state_code_mapping['State Code']))

# Fill missing 'State Code' based on 'State' column
customers['State Code'] = customers.apply(
    lambda row: state_code_dict.get(row['State'], f"NewCode_{row.name}") if pd.isnull(row['State Code']) else row['State Code'],
    axis=1
)

# Drop rows where 'Square Meters' is missing in the Store dataset
stores_cleaned = stores.dropna(subset=['Square Meters'])

# Task 3
print(sales_cleaned.head())
print(customers.head())
print(stores_cleaned.head())

# Task 4
# Display the general structure of the datasets
print(customers.info())
print(sales_cleaned.info())
print(stores_cleaned.info())

# Task 5
# List unique product categories
product_categories = products['Category'].unique()
print(product_categories)

# Task 6
# Group by Store and Order Date, sum the quantities, then sort
top_stores = sales.groupby(['StoreKey', 'Order Date'])['Quantity'].sum().reset_index()
top_stores_sorted = top_stores.groupby('StoreKey').sum().sort_values(by='Quantity', ascending=False).head(3)

# Plot top stores by quantity sold
top_stores_sorted['Quantity'].plot(kind='bar', figsize=(10, 6))
plt.title('Top 3 Stores by Sales Quantity')
plt.xlabel('StoreKey')
plt.ylabel('Quantity Sold')
plt.xticks(rotation=0)
plt.show()

# Task 7
# Count the number of male and female customers
gender_count = customers['Gender'].value_counts()

# Plot the results as a pie chart
gender_count.plot(kind='pie', figsize=(8, 8), autopct='%1.1f%%' ,startangle=90, legend=False)
plt.title('Gender Distribution of Customers')
plt.ylabel('')  # Remove the y-label to make the chart cleaner
plt.show()

# Task 8
# Identify unique countries where the company has stores
countries_with_stores = stores_cleaned['Country'].unique()

# Plot the number of stores by country
stores_by_country = stores_cleaned['Country'].value_counts()
stores_by_country.plot(kind='bar', figsize=(10, 6))
plt.title('Number of Stores by Country')
plt.xlabel('Country')
plt.ylabel('Number of Stores')
plt.xticks(rotation=0)
plt.show()



store_countries = stores["Country"].value_counts()
print(store_countries)

store_countries.plot(kind="bar", title="Countries with Stores")
plt.ylabel("Number of Stores")
plt.show()

# --- Task 7 (15 marks): Determine whether the company has a higher number of male or female customers. Use an appropriate chart to display the findings. ---
print("--- Task 7: Determining Customer Gender Distribution ---") #cite: 14

# Step 1: Count the occurrences of each gender in the Customers DataFrame
gender_counts = customers['Gender'].value_counts() # Get the count for each unique gender
print("Number of customers by gender:")
print(gender_counts) #cite: 14

# Step 2: Determine which gender has a higher number of customers
if gender_counts.get('Male', 0) > gender_counts.get('Female', 0):
    print("\nThe company has a higher number of male customers.") #cite: 14
elif gender_counts.get('Female', 0) > gender_counts.get('Male', 0):
    print("\nThe company has a higher number of female customers.") #cite: 14
else:
    print("\nThe company has an equal number of male and female customers.") #cite: 14

# Step 3: Create an appropriate chart to display the findings
import seaborn as sns # Import seaborn library
plt.figure(figsize=(8, 6)) # Set the figure size
sns.barplot(x=gender_counts.index, y=gender_counts.values, palette='coolwarm') # Create a bar plot for gender counts
plt.title('Number of Male vs. Female Customers') # Set the chart title
plt.xlabel('Gender') # Label for the X-axis
plt.ylabel('Number of Customers') # Label for the Y-axis
plt.grid(axis='y', linestyle='--', alpha=0.7) # Add a horizontal grid
plt.tight_layout() # Adjust layout
plt.show() # Display the plot
print("\nTask 7 completed. The chart showing male vs. female customer counts has been displayed.\n") #cite: 14

import seaborn as sns

# Assuming stores_df is already loaded and cleaned from previous tasks
# (If running this snippet independently, ensure stores_df is loaded first)
# Example:
# stores_df = pd.read_csv("Stores.csv")
# stores_df.dropna(subset=['Square Meters'], inplace=True) # Apply cleaning if running standalone
# stores_df['Open Date'] = pd.to_datetime(stores_df['Open Date']) # Apply cleaning if running standalone

# Task 8 (15 marks): Identify the countries in which the company has established stores. Use an appropriate chart to present the results.
print("Task 8: Identifying Countries with Established Stores") #cite: 15

# Step 1: Extract the unique country names from the Stores DataFrame
countries_with_stores = stores['Country'].unique()
print("The countries in which the company has established stores are:") #cite: 15
for country in countries_with_stores:
    print(f"- {country}")

# Step 2: Count the number of stores in each country to understand distribution
country_counts = stores['Country'].value_counts()

# Step 3: Create an appropriate chart to present the results
plt.figure(figsize=(12, 7)) # Set a larger figure size for more countries
sns.barplot(x=country_counts.index, y=country_counts.values, palette='cubehelix') # Create a bar plot of store counts per country
plt.title('Number of Stores per Country') # Set the chart title
plt.xlabel('Country') # Label for the X-axis
plt.ylabel('Number of Stores') # Label for the Y-axis
plt.xticks(rotation=45, ha='right') # Rotate X-axis labels for better readability, especially with many countries
plt.grid(axis='y', linestyle='--', alpha=0.7) # Add a horizontal grid
plt.tight_layout() # Adjust layout
plt.show() # Display the plot

# Task 8 (15 marks): Identify the countries in which the company has established stores. Use an appropriate chart to present the results.
print("Task 8: Identifying Countries with Established Stores") #cite: 15

# Step 1: Extract the unique country names from the Stores DataFrame
countries_with_stores = stores['Country'].unique()
print("The countries in which the company has established stores are:") #cite: 15
for country in countries_with_stores:
    print(f"- {country}")

# Step 2: Count the number of stores in each country to understand distribution
country_counts = stores['Country'].value_counts()

# Step 3: Create an appropriate chart to present the results (Using Matplotlib only)
plt.figure(figsize=(12, 7)) # Set a larger figure size for more countries
plt.bar(country_counts.index, country_counts.values, color=plt.cm.Paired.colors) # Create a bar plot of store counts per country
plt.title('Number of Stores per Country') # Set the chart title
plt.xlabel('Country') # Label for the X-axis
plt.ylabel('Number of Stores') # Label for the Y-axis
plt.xticks(rotation=45, ha='right') # Rotate X-axis labels for better readability, especially with many countries
plt.grid(axis='y', linestyle='--', alpha=0.7) # Add a horizontal grid
plt.tight_layout() # Adjust layout
plt.show() # Display the plot

# --- Task 7 (15 marks): Determine whether the company has a higher number of male or female customers. Use an appropriate chart to display the findings. ---
print("--- Task 7: Determining Customer Gender Distribution - Donut Chart ---") #cite: 14

# Assuming customers has already been loaded and cleaned from previous tasks.
# For standalone execution of this block, you might need to re-load/prepare customers_df:
try:
    if 'customers' not in locals():
        customers = pd.read_csv("Customers.csv")
        customers.dropna(subset=['Gender'], inplace=True)
        print("Customers DataFrame loaded/prepared for this block.")
except FileNotFoundError as e:
    print(f"Error: File not found for customers_df: {e}")
    exit()
except Exception as e:
    print(f"An error occurred preparing customers_df: {e}")
    exit()

# Step 1: Count the occurrences of each gender in the Customers DataFrame
gender_counts = customers['Gender'].value_counts()
print("Number of customers by gender:")
print(gender_counts) #cite: 14

# Step 2: Determine which gender has a higher number of customers
if gender_counts.get('Male', 0) > gender_counts.get('Female', 0):
    print("\nThe company has a higher number of male customers.")
elif gender_counts.get('Female', 0) > gender_counts.get('Male', 0):
    print("\nThe company has a higher number of female customers.")
else:
    print("\nThe company has an equal number of male and female customers.")

# Step 3: Create a Donut Chart to display the findings (Using Matplotlib only)
plt.figure(figsize=(8, 8)) # Set the figure size

# Create the pie chart part of the donut chart
plt.pie(gender_counts.values,
        labels=gender_counts.index,
        autopct='%1.1f%%',
        colors=['lightskyblue', 'lightcoral'],
        startangle=90,
        pctdistance=0.85) # Adjust position of the percentages

# Draw a white circle in the middle to create the donut hole
centre_circle = plt.Circle((0,0), 0.70, fc='white') # Create a circle object
fig = plt.gcf() # Get the current figure
fig.gca().add_artist(centre_circle) # Add the circle to the plot

plt.title('Percentage of Male vs. Female Customers') # Chart title
plt.axis('equal') # Ensure the donut chart is perfectly circular
plt.show() # Display the plot
print("\nTask 7 completed. The Donut Chart showing customer gender distribution has been displayed.\n") #cite: 14

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Customers DataFrame and perform basic cleaning if necessary
try:
    customers = pd.read_csv("Customers.csv", encoding='latin-1')
    # Example cleaning: drop rows where 'Gender' is missing
    customers.dropna(subset=['Gender'], inplace=True)
    print("Customers DataFrame loaded and cleaned.")
except FileNotFoundError:
    print("Error: Customers.csv not found. Please make sure the file is in the correct directory.")
    exit()
except Exception as e:
    print(f"An error occurred while loading or cleaning the Customers DataFrame: {e}")
    exit()

# --- Task 7 (15 marks): Determine whether the company has a higher number of male or female customers. Use an appropriate chart to display the findings. ---
print("--- Task 7: Determining Customer Gender Distribution - Pie Chart ---") #cite: 14


# Step 1: Count the occurrences of each gender in the Customers DataFrame
gender_counts = customers['Gender'].value_counts()
print("Number of customers by gender:")
print(gender_counts) #cite: 14

# Step 2: Determine which gender has a higher number of customers
if gender_counts.get('Male', 0) > gender_counts.get('Female', 0):
    print("\nThe company has a higher number of male customers.")
elif gender_counts.get('Female', 0) > gender_counts.get('Male', 0):
    print("\nThe company has a higher number of female customers.")
else:
    print("\nThe company has an equal number of male and female customers.")

# Step 3: Create a Pie Chart to display the findings (Using Matplotlib only)
plt.figure(figsize=(8, 8)) # Pie charts often look better in a square figure
plt.pie(gender_counts.values,
        labels=gender_counts.index,
        autopct='%1.1f%%', # Display percentages on each slice
        colors=['lightskyblue', 'lightcoral'], # Colors for the slices
        startangle=90) # Start the first slice from the top
plt.title('Percentage of Male vs. Female Customers') # Chart title
plt.axis('equal') # Ensure the pie chart is perfectly circular (equal aspect ratio)
plt.show() # Display the plot

import pandas as pd
import matplotlib.pyplot as plt

# Load the Customers DataFrame and perform basic cleaning if necessary
try:
    customers = pd.read_csv("Customers.csv", encoding='latin-1')
    # Example cleaning: drop rows where 'Gender' is missing
    customers.dropna(subset=['Gender'], inplace=True)
    print("Customers DataFrame loaded and cleaned.")
except FileNotFoundError:
    print("Error: Customers.csv not found. Please make sure the file is in the correct directory.")
    exit()
except Exception as e:
    print(f"An error occurred while loading or cleaning the Customers DataFrame: {e}")
    exit()

# --- Task 7 (15 marks): Determine whether the company has a higher number of male or female customers. Use an appropriate chart to display the findings. ---
print("--- Task 7: Determining Customer Gender Distribution - Pie Chart ---") #cite: 13, 14 # Commented out cite


# Step 1: Count the occurrences of each gender in the Customers DataFrame
gender_counts = customers['Gender'].value_counts() # Get the count for each unique gender
print("Number of customers by gender:")
print(gender_counts) #cite: 13 # Commented out cite

# Step 2: Determine which gender has a higher number of customers
if gender_counts.get('Male', 0) > gender_counts.get('Female', 0):
    print("\nThe company has a higher number of male customers.") #cite: 13 # Commented out cite
elif gender_counts.get('Female', 0) > gender_counts.get('Male', 0):
    print("\nThe company has a higher number of female customers.") #cite: 13 # Commented out cite
else:
    print("\nThe company has an equal number of male and female customers.") #cite: 13 # Commented out cite

# Step 3: Create a Pie Chart to display the findings (Using Matplotlib only)
plt.figure(figsize=(8, 8)) # Pie charts often look better in a square figure
plt.pie(gender_counts.values,
        labels=gender_counts.index,
        autopct='%1.1f%%', # Display percentages on each slice
        colors=['lightskyblue', 'lightcoral'], # Colors for the slices
        startangle=90) # Start the first slice from the top
plt.title('Percentage of Male vs. Female Customers') # Chart title
plt.axis('equal') # Ensure the pie chart is perfectly circular (equal aspect ratio)
plt.show() # Display the plot

import pandas as pd
import matplotlib.pyplot as plt

# Load the Customers DataFrame and perform basic cleaning if necessary
try:
    customers = pd.read_csv("Customers.csv", encoding='latin-1')
    # Example cleaning: drop rows where 'Gender' is missing
    customers.dropna(subset=['Gender'], inplace=True) # Ensure 'Gender' column has no NaN values
    print("Customers DataFrame loaded and cleaned.")
except FileNotFoundError as e:
    print(f"Error: File not found for customers_df: {e}")
    exit()
except Exception as e:
    print(f"An error occurred preparing customers_df: {e}")
    exit()

# --- Task 7 (15 marks): Determine whether the company has a higher number of male or female customers. Use an appropriate chart to display the findings. ---
print("--- Task 7: Determining Customer Gender Distribution - Bar Chart with Counts ---")

# Step 1: Count the occurrences of each gender in the Customers DataFrame
gender_counts = customers['Gender'].value_counts() # Get the count for each unique gender
print("Number of customers by gender:")
print(gender_counts)

# Step 2: Determine which gender has a higher number of customers
if gender_counts.get('Male', 0) > gender_counts.get('Female', 0):
    print("\nThe company has a higher number of male customers.")
elif gender_counts.get('Female', 0) > gender_counts.get('Male', 0):
    print("\nThe company has a higher number of female customers.")
else:
    print("\nThe company has an equal number of male and female customers.")

# Step 3: Create a Bar Chart to display the findings with absolute counts on bars
plt.figure(figsize=(8, 6)) # Set the figure size
bars = plt.bar(gender_counts.index, gender_counts.values, color=['steelblue', 'salmon']) # Create a bar plot for gender counts
plt.title('Number of Male vs. Female Customers') # Set the chart title
plt.xlabel('Gender') # Label for the X-axis
plt.ylabel('Number of Customers') # Label for the Y-axis
plt.grid(axis='y', linestyle='--', alpha=0.7) # Add a horizontal grid

# Add the count labels on top of each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval + 50, round(yval), ha='center', va='bottom') # Adjust +50 for padding

plt.tight_layout() # Adjust layout
plt.show() # Display the plot

import pandas as pd
import matplotlib.pyplot as plt

# Load the Customers DataFrame and perform basic cleaning if necessary
try:
    customers = pd.read_csv("Customers.csv", encoding='latin-1')
    # Example cleaning: drop rows where 'Gender' is missing
    customers.dropna(subset=['Gender'], inplace=True)
    print("Customers DataFrame loaded and cleaned.")
except FileNotFoundError:
    print("Error: Customers.csv not found. Please make sure the file is in the correct directory.")
    exit()
except Exception as e:
    print(f"An error occurred while loading or cleaning the Customers DataFrame: {e}")
    exit()

# --- Task 7 (15 marks): Determine whether the company has a higher number of male or female customers. Use an appropriate chart to display the findings. ---
print("--- Task 7: Determining Customer Gender Distribution - Pie Chart with Counts ---")

# Step 1: Count the occurrences of each gender in the Customers DataFrame
gender_counts = customers['Gender'].value_counts() # Get the count for each unique gender
total_customers = gender_counts.sum() # Get the total number of customers
print("Number of customers by gender:")
print(gender_counts)

# Step 2: Determine which gender has a higher number of customers
if gender_counts.get('Male', 0) > gender_counts.get('Female', 0):
    print("\nThe company has a higher number of male customers.")
elif gender_counts.get('Female', 0) > gender_counts.get('Male', 0):
    print("\nThe company has a higher number of female customers.")
else:
    print("\nThe company has an equal number of male and female customers.")

# Step 3: Create a Pie Chart to display the findings with absolute counts on slices
plt.figure(figsize=(8, 8)) # Pie charts often look better in a square figure

# Define a custom formatting function for autopct
def autopct_format_absolute(pct):
    absolute_number = int(round(pct/100.*total_customers))
    return f'{pct:.1f}%\n({absolute_number})' # Format as Percentage (Count)

plt.pie(gender_counts.values,
        labels=gender_counts.index,
        autopct=autopct_format_absolute, # Use the custom formatting function
        colors=['lightskyblue', 'lightcoral'], # Colors for the slices
        startangle=90) # Start the first slice from the top
plt.title('Percentage and Count of Male vs. Female Customers') # Chart title
plt.axis('equal') # Ensure the pie chart is perfectly circular (equal aspect ratio)
plt.show() # Display the plot
print("\nTask 7 completed. The Pie Chart showing customer gender distribution with percentages and counts has been displayed.")

# Task 7
# Count the number of male and female customers
gender_counts = customers['Gender'].value_counts()
total_customers = gender_counts.sum()

# Custom autopct function to display percentage, actual count, and the unit 'customers'
def autopct_format_with_unit(pct):
    absolute_value = int(pct/100.*total_customers)
    return f'{pct:.1f}%\n({absolute_value} customers)'

# Create a pie chart
plt.figure(figsize=(8, 8))
plt.pie(gender_counts, labels=gender_counts.index, autopct=autopct_format_with_unit, startangle=90, colors=['skyblue', 'lightcoral'])
plt.title('Proportion of Customers by Gender')
plt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the Stores DataFrame and perform basic cleaning if necessary
try:
    stores_df = pd.read_csv("Stores.csv")
    # Delete rows with missing 'Square Meters' in stores_df
    stores_df.dropna(subset=['Square Meters'], inplace=True)
    print("Stores DataFrame loaded and cleaned.")
except FileNotFoundError as e:
    print(f"Error: File not found for Stores.csv: {e}")
    exit()
except Exception as e:
    print(f"An error occurred while loading or cleaning the Stores DataFrame: {e}")
    exit()

# Step 1: Extract the unique country names from the Stores DataFrame
countries_with_stores = stores_df['Country'].unique()
print("The countries in which the company has established stores are:")
for country in countries_with_stores:
    print(f"- {country}")

# Step 2: Count the number of stores in each country to understand distribution
country_counts = stores_df['Country'].value_counts()

# Step 3: Create an appropriate chart to present the results (Using Matplotlib only)
plt.figure(figsize=(12, 7)) # Set a larger figure size for more countries
bars = plt.bar(country_counts.index, country_counts.values, color=plt.cm.Paired.colors) # Create a bar plot of store counts per country
plt.title('Number of Stores per Country') # Set the chart title
plt.xlabel('Country') # Label for the X-axis
plt.ylabel('Number of Stores') # Label for the Y-axis
plt.xticks(rotation=45, ha='right') # Rotate X-axis labels for better readability, especially with many countries
plt.grid(axis='y', linestyle='--', alpha=0.7) # Add a horizontal grid

# Add the number above each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval + 0.1, round(yval, 2), ha='center', va='bottom') # Adjust +0.1 for padding

plt.tight_layout() # Adjust layout
plt.show()